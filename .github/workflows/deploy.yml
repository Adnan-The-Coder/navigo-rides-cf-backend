name: Deploy to Cloudflare Workers

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Generate Drizzle migrations
        run: pnpm run generate

      - name: Run database migrations
        run: |
          # Create a non-interactive migration script for CI
          cat > scripts/ci-migrate.mjs << 'EOF'
          import { readdir } from 'fs/promises';
          import { exec } from 'child_process';
          import { promisify } from 'util';

          const execAsync = promisify(exec);
          const MIGRATION_DIR = './drizzle';
          const DB_NAME = 'navigo-main-db';

          try {
            const files = (await readdir(MIGRATION_DIR)).filter(f => f.endsWith('.sql'));
            
            if (!files.length) {
              console.log('‚ÑπÔ∏è No SQL migration files found. Skipping migrations.');
              process.exit(0);
            }

            // Sort files to get the latest migration
            files.sort();
            const latestMigration = files[files.length - 1];
            
            console.log(`üöÄ Running latest migration: ${latestMigration}`);
            
            const cmd = `wrangler d1 execute ${DB_NAME} --remote --file="${MIGRATION_DIR}/${latestMigration}"`;
            console.log(`Executing: ${cmd}`);
            
            const { stdout, stderr } = await execAsync(cmd);
            
            if (stdout) console.log(stdout);
            if (stderr) console.error(stderr);
            
            console.log('‚úÖ Migration completed successfully.');
          } catch (error) {
            console.error('‚ùå Migration failed:', error.message);
            process.exit(1);
          }
          EOF
          
          node scripts/ci-migrate.mjs
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy src/index.ts --minify --env=""
          wranglerVersion: "4.32.0"